# Generated by Django 5.1.4 on 2025-03-09 03:51

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='OnboardingQuestionnaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('category', models.CharField(choices=[('General', 'General'), ('Technical', 'Technical'), ('Compliance', 'Compliance'), ('Legal', 'Legal'), ('Operational', 'Operational')], default='General', max_length=50)),
                ('is_mandatory', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('Admin', 'Admin'), ('User', 'User')], default='User', max_length=50)),
                ('organization_name', models.CharField(blank=True, max_length=255, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('vendor_type', models.CharField(choices=[('Cloud Service Provider', 'Cloud Service Provider'), ('Software Vendor', 'Software Vendor'), ('Network Infrastructure', 'Network Infrastructure'), ('Data Center', 'Data Center'), ('Other', 'Other')], default='Cloud Service Provider', max_length=50)),
                ('contact_email', models.EmailField(max_length=254)),
                ('contact_phone', models.CharField(max_length=20)),
                ('address', models.TextField()),
                ('website', models.URLField(blank=True, null=True)),
                ('tax_id', models.CharField(blank=True, max_length=50, null=True)),
                ('business_license', models.CharField(blank=True, max_length=50, null=True)),
                ('years_in_operation', models.PositiveIntegerField(blank=True, null=True)),
                ('num_clients', models.PositiveIntegerField(blank=True, null=True)),
                ('annual_revenue', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('certified', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], default='no', max_length=3)),
                ('auditable', models.BooleanField(default=False)),
                ('insurance_coverage', models.TextField(blank=True, null=True)),
                ('agreed_to_terms', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('certifications', models.ManyToManyField(blank=True, related_name='vendors', to='vendor_risk.certification')),
                ('user', models.OneToOneField(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='vendor_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SecurityProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('encryption', models.BooleanField(default=False)),
                ('mfa', models.BooleanField(default=False)),
                ('rbac', models.BooleanField(default=False)),
                ('penetration_testing', models.BooleanField(default=False)),
                ('cloud_usage', models.CharField(choices=[('Public Cloud', 'Public Cloud'), ('Private Cloud', 'Private Cloud'), ('Hybrid Cloud', 'Hybrid Cloud'), ('No Cloud', 'No Cloud')], default='No Cloud', max_length=50)),
                ('certifications', models.ManyToManyField(blank=True, to='vendor_risk.certification')),
                ('vendor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='security_profile', to='vendor_risk.vendor')),
            ],
        ),
        migrations.CreateModel(
            name='SecurityChecklist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('Cloud Security', 'Cloud Security'), ('Network and Infrastructure', 'Network and Infrastructure'), ('Cybersecurity', 'Cybersecurity'), ('Software Development', 'Software Development'), ('Data Center', 'Data Center'), ('Other', 'Other'), ('Certifications', 'Certifications')], max_length=255)),
                ('question', models.TextField()),
                ('response', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Completed', 'Completed')], default='Pending', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='security_checklists', to='vendor_risk.vendor')),
            ],
        ),
        migrations.CreateModel(
            name='RiskAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_date', models.DateField(default=django.utils.timezone.now)),
                ('risk_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('compliance_status', models.CharField(choices=[('Compliant', 'Compliant'), ('Non-Compliant', 'Non-Compliant')], default='Non-Compliant', max_length=50)),
                ('recommendations', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='risk_assessments', to='vendor_risk.vendor')),
            ],
        ),
        migrations.CreateModel(
            name='VendorResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Partial', 'Partial'), ('N/A', 'N/A')], max_length=255)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='vendor_risk.onboardingquestionnaire')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='vendor_risk.vendor')),
            ],
        ),
    ]
